function [predicted_Pb] = Pb_water()
%Pb_water Uses random forest to predict whether lead leaching
%is likely to occur in a certain water distribution system
close all

%read files
filename=uigetfile('*.xlsx');
[A B C]=xlsread(filename,1);
inputs_cal=A(:,7:16);
outputs_cal=A(:,6);
[A B C]=xlsread(filename,2);
inputs_val=A(:,7:16);
outputs_val=A(:,6);

%implement Rando Forest
Mdl = TreeBagger(500,inputs_cal,outputs_cal,'OOBPrediction','On','Method','classification')
view(Mdl.Trees{1},'Mode','graph')
figure;
oobErrorBaggedEnsemble = oobError(Mdl);
plot(oobErrorBaggedEnsemble)
xlabel 'Number of grown trees';
ylabel 'Out-of-bag classification error';
Pb_predict = predict(Mdl,inputs_val);
Pb_predict = str2double(Pb_predict);

%calculate performance of the model
count_good=0;
count_bad=0;
count0_positive=0;
count0_negative=0;
count1_positive=0;
count1_negative=0;
count2_positive=0;
count2_negative=0;
for i=1:length(Pb_predict)
    if Pb_predict(i)==outputs_val(i)
        count_good=count_good+1;
        if Pb_predict(i)==0
            count0_positive=count0_positive+1;
        elseif Pb_predict(i)==1
            count1_positive=count1_positive+1;
        else
            count2_positive=count2_positive+1;
        end
    else
        count_bad=count_bad+1;
        if Pb_predict(i)==0
            count0_negative=count0_negative+1;
        elseif Pb_predict(i)==1
            count1_negative=count1_negative+1;
        else
            count2_negative=count2_negative+1;
        end
    end
end
overall_performance=count_good/(count_good+count_bad)

%prepare data for confusion table
confusion_table_predicted=zeros(length(outputs_val(:,1)),6);
confusion_table_estimated=zeros(length(outputs_val(:,1)),6);
for i=1:length(outputs_val)
    if Pb_predict(i)==0
        confusion_table_predicted(i,1)=1;
    elseif Pb_predict(i)==1
        confusion_table_predicted(i,2)=1;
    elseif Pb_predict(i)==2
        confusion_table_predicted(i,3)=1;
    elseif Pb_predict(i)==3
        confusion_table_predicted(i,4)=1;
    elseif Pb_predict(i)==4
        confusion_table_predicted(i,5)=1;
    elseif Pb_predict(i)==5
        confusion_table_predicted(i,6)=1;
    end
        if outputs_val(i)==0
        confusion_table_estimated(i,1)=1;
    elseif outputs_val(i)==1
        confusion_table_estimated(i,2)=1;
    elseif outputs_val(i)==2
        confusion_table_estimated(i,3)=1;
    elseif outputs_val(i)==3
        confusion_table_estimated(i,4)=1;
    elseif outputs_val(i)==4
        confusion_table_estimated(i,5)=1;
    elseif outputs_val(i)==5
        confusion_table_estimated(i,6)=1;
        end
end
        
%plot results       
figure
tiledlayout(2,1)
% Top plot
nexttile
annotation('textbox','string','Histogram categories -> 0: P(lead)=0 1:P(lead)<0.2 2:P(lead)<0.4 3:P(lead)<0.6 4:P(lead)<0.8 5:P(lead)=1')
histogram(Pb_predict,'Normalization','pdf')
title('Histogram of measured probability of lead leaching')
ylabel('probability density')
xlabel('Random Forest category')

% second plot
nexttile
histogram(outputs_val,'Normalization','pdf')
title('Histogram of estimated probability of lead leaching')
ylabel('probability density')
xlabel('Random Forest category')

figure
plotconfusion(confusion_table_predicted',confusion_table_estimated')
end
